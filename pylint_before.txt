=== PYLINT ANALYSIS BEFORE FIXES ===
************* Module src.config_environments
src/config_environments.py:8:0: R0903: Too few public methods (0/2) (too-few-public-methods)
src/config_environments.py:75:0: R0903: Too few public methods (0/2) (too-few-public-methods)
src/config_environments.py:106:0: R0903: Too few public methods (0/2) (too-few-public-methods)
src/config_environments.py:129:0: R0903: Too few public methods (0/2) (too-few-public-methods)
src/config_environments.py:153:0: R0903: Too few public methods (0/2) (too-few-public-methods)
src/config_environments.py:193:0: R0903: Too few public methods (0/2) (too-few-public-methods)
************* Module src.models.updated_models
src/models/updated_models.py:112:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/models/updated_models.py:141:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/models/updated_models.py:268:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/models/updated_models.py:292:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/models/updated_models.py:330:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/models/updated_models.py:365:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/models/updated_models.py:8:0: C0411: standard import "enum.Enum" should be placed before third party imports "flask_sqlalchemy.SQLAlchemy", "flask_login.UserMixin", "werkzeug.security.generate_password_hash" (wrong-import-order)
************* Module src.models.role
src/models/role.py:12:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module src.models
src/models/__init__.py:7:0: C0413: Import "from .role import Role, roles_users" should be placed at the top of the module (wrong-import-position)
src/models/__init__.py:8:0: C0413: Import "from .user import User" should be placed at the top of the module (wrong-import-position)
src/models/__init__.py:9:0: C0413: Import "from .lead import Lead" should be placed at the top of the module (wrong-import-position)
src/models/__init__.py:10:0: C0413: Import "from .project import Project" should be placed at the top of the module (wrong-import-position)
src/models/__init__.py:11:0: C0413: Import "from .consultation import ConsultationRequest" should be placed at the top of the module (wrong-import-position)
************* Module src.main
src/main.py:39:0: R0914: Too many local variables (17/15) (too-many-locals)
src/main.py:70:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/main.py:74:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/main.py:87:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/main.py:39:0: R0915: Too many statements (76/50) (too-many-statements)
src/main.py:91:4: W0612: Unused variable 'limiter' (unused-variable)
src/main.py:21:0: C0411: third party import "flask_limiter.util.get_remote_address" should be placed before first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:22:0: C0411: third party import "flask_limiter.Limiter" should be placed before first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:23:0: C0411: third party import "flask_talisman.Talisman" should be placed before first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:24:0: C0411: third party import "flask_wtf.csrf.CSRFProtect" should be placed before first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:25:0: C0411: third party import "flask_cors.CORS" should be placed before first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:26:0: C0411: third party import "flask.Flask" should be placed before first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:27:0: C0411: standard import "datetime" should be placed before third party imports "flask_limiter.util.get_remote_address", "flask_limiter.Limiter", "flask_talisman.Talisman", "flask_wtf.csrf.CSRFProtect", "flask_cors.CORS", "flask.Flask" and first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:28:0: C0411: standard import "logging" should be placed before third party imports "flask_limiter.util.get_remote_address", "flask_limiter.Limiter", "flask_talisman.Talisman", "flask_wtf.csrf.CSRFProtect", "flask_cors.CORS", "flask.Flask" and first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:29:0: C0411: standard import "os" should be placed before third party imports "flask_limiter.util.get_remote_address", "flask_limiter.Limiter", "flask_talisman.Talisman", "flask_wtf.csrf.CSRFProtect", "flask_cors.CORS", "flask.Flask" and first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.routes.api.api_bp", "src.models.db", "src.config_secure.get_config"  (wrong-import-order)
src/main.py:31:0: C0411: standard import "sys" should be placed before third party imports "flask_limiter.util.get_remote_address", "flask_limiter.Limiter", "flask_talisman.Talisman", "flask_wtf.csrf.CSRFProtect", "flask_cors.CORS", "flask.Flask" and first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.models.db", "src.config_secure.get_config", "src.utils.logging_config.logger"  (wrong-import-order)
src/main.py:32:0: C0411: standard import "time" should be placed before third party imports "flask_limiter.util.get_remote_address", "flask_limiter.Limiter", "flask_talisman.Talisman", "flask_wtf.csrf.CSRFProtect", "flask_cors.CORS", "flask.Flask" and first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.models.db", "src.config_secure.get_config", "src.utils.logging_config.logger"  (wrong-import-order)
src/main.py:33:0: C0411: standard import "typing.Dict" should be placed before third party imports "flask_limiter.util.get_remote_address", "flask_limiter.Limiter", "flask_talisman.Talisman", "flask_wtf.csrf.CSRFProtect", "flask_cors.CORS", "flask.Flask" and first party imports "src.errors.register_error_handlers", "src.content.NAVIGATION", "src.utils.get_current_language" (...) "src.models.db", "src.config_secure.get_config", "src.utils.logging_config.logger"  (wrong-import-order)
src/main.py:30:0: C0412: Imports from package src are not grouped (ungrouped-imports)
************* Module src.security_middleware
src/security_middleware.py:47:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
src/security_middleware.py:102:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:107:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:125:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:130:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:137:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:116:4: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
src/security_middleware.py:156:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:174:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:209:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:246:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:257:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
src/security_middleware.py:11:0: C0411: standard import "collections.defaultdict" should be placed before third party import "flask.request" (wrong-import-order)
src/security_middleware.py:12:0: C0411: standard import "hashlib" should be placed before third party import "flask.request" (wrong-import-order)
src/security_middleware.py:13:0: C0411: standard import "hmac" should be placed before third party import "flask.request" (wrong-import-order)
************* Module src.routes.api
src/routes/api.py:34:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api.py:52:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api.py:66:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api.py:89:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api.py:104:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api.py:118:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api.py:132:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api.py:164:11: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module src.routes.webhooks
src/routes/webhooks.py:86:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/webhooks.py:75:8: E1101: Function 'process_webhook_event' has no 'delay' member (no-member)
src/routes/webhooks.py:139:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/webhooks.py:173:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/webhooks.py:159:8: E1101: Function 'send_notification_email' has no 'delay' member (no-member)
src/routes/webhooks.py:218:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/webhooks.py:200:12: E1101: Function 'send_notification_email' has no 'delay' member (no-member)
src/routes/webhooks.py:6:0: C0411: standard import "hmac" should be placed before third party imports "flask.Blueprint", "werkzeug.exceptions.BadRequest" (wrong-import-order)
src/routes/webhooks.py:7:0: C0411: standard import "hashlib" should be placed before third party imports "flask.Blueprint", "werkzeug.exceptions.BadRequest" (wrong-import-order)
src/routes/webhooks.py:8:0: C0411: standard import "datetime.datetime" should be placed before third party imports "flask.Blueprint", "werkzeug.exceptions.BadRequest" (wrong-import-order)
************* Module src.routes.main_routes
src/routes/main_routes.py:7:0: C0301: Line too long (102/100) (line-too-long)
src/routes/main_routes.py:117:12: E0602: Undefined variable 'app' (undefined-variable)
src/routes/main_routes.py:225:12: E0602: Undefined variable 'app' (undefined-variable)
************* Module src.routes.api_v1
src/routes/api_v1.py:559:9: W0511: TODO: Получить из настроек (fixme)
src/routes/api_v1.py:789:36: W0511: TODO: Проверить подключение к Redis (fixme)
src/routes/api_v1.py:790:36: W0511: TODO: Проверить подключение к n8n (fixme)
src/routes/api_v1.py:71:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:106:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:214:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:285:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:270:8: E1101: Function 'send_welcome_email' has no 'delay' member (no-member)
src/routes/api_v1.py:379:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:412:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:496:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:579:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:561:8: E1101: Function 'send_lead_notification' has no 'delay' member (no-member)
src/routes/api_v1.py:684:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:767:11: W0718: Catching too general exception Exception (broad-exception-caught)
src/routes/api_v1.py:6:0: C0411: standard import "datetime.datetime" should be placed before third party imports "flask.Blueprint", "werkzeug.security.check_password_hash" (wrong-import-order)
************* Module src.content
src/content.py:36:0: C0301: Line too long (111/100) (line-too-long)
src/content.py:39:0: C0301: Line too long (210/100) (line-too-long)
src/content.py:42:0: C0301: Line too long (133/100) (line-too-long)
src/content.py:44:0: C0301: Line too long (121/100) (line-too-long)
src/content.py:46:0: C0301: Line too long (112/100) (line-too-long)
src/content.py:55:0: C0301: Line too long (116/100) (line-too-long)
src/content.py:58:0: C0301: Line too long (215/100) (line-too-long)
src/content.py:61:0: C0301: Line too long (148/100) (line-too-long)
src/content.py:63:0: C0301: Line too long (123/100) (line-too-long)
src/content.py:65:0: C0301: Line too long (119/100) (line-too-long)
src/content.py:80:0: C0301: Line too long (137/100) (line-too-long)
src/content.py:92:0: C0301: Line too long (117/100) (line-too-long)
src/content.py:104:0: C0301: Line too long (114/100) (line-too-long)
src/content.py:118:0: C0301: Line too long (152/100) (line-too-long)
src/content.py:130:0: C0301: Line too long (128/100) (line-too-long)
src/content.py:142:0: C0301: Line too long (102/100) (line-too-long)
src/content.py:180:0: C0301: Line too long (102/100) (line-too-long)
src/content.py:195:0: C0301: Line too long (122/100) (line-too-long)
src/content.py:205:0: C0301: Line too long (118/100) (line-too-long)
src/content.py:215:0: C0301: Line too long (118/100) (line-too-long)
src/content.py:1:0: R0801: Similar lines in 2 files
==src.routes.api_v1:[566:573]
==src.routes.webhooks:[110:117]
            'lead': {
                'id': lead.id,
                'name': lead.name,
                'email': lead.email,
                'phone': lead.phone,
                'service_type': lead.service_type,
                'status': lead.status, (duplicate-code)
src/content.py:1:0: R0801: Similar lines in 2 files
==src.routes.api_v1:[472:478]
==src.routes.webhooks:[111:117]
                'id': lead.id,
                'name': lead.name,
                'email': lead.email,
                'phone': lead.phone,
                'service_type': lead.service_type,
                'status': lead.status, (duplicate-code)
src/content.py:1:0: R0801: Similar lines in 2 files
==src.routes.api_v1:[546:551]
==src.routes.webhooks:[111:116]
            'id': lead.id,
            'name': lead.name,
            'email': lead.email,
            'phone': lead.phone,
            'service_type': lead.service_type, (duplicate-code)
src/content.py:1:0: R0401: Cyclic import (src.models -> src.models.project) (cyclic-import)
src/content.py:1:0: R0401: Cyclic import (src.models -> src.models.consultation) (cyclic-import)
src/content.py:1:0: R0401: Cyclic import (src.models -> src.models.user) (cyclic-import)
src/content.py:1:0: R0401: Cyclic import (src.models -> src.models.user -> src.models.role) (cyclic-import)
src/content.py:1:0: R0401: Cyclic import (src.models -> src.models.lead) (cyclic-import)

-----------------------------------
Your code has been rated at 8.95/10

Pylint completed with issues
