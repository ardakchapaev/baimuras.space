src/config_environments.py:    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
src/config_environments.py:    JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY') or SECRET_KEY
src/config_environments.py:    MAIL_SERVER = os.environ.get('MAIL_SERVER') or 'smtp.gmail.com'
src/config_environments.py:    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)
src/config_environments.py:    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
src/config_environments.py:    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
src/config_environments.py:    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
src/config_environments.py:    MAIL_DEFAULT_SENDER = os.environ.get('MAIL_DEFAULT_SENDER') or 'info@baimuras.space'
src/config_environments.py:    CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL') or 'redis://localhost:6379/0'
src/config_environments.py:    CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND') or 'redis://localhost:6379/0'
src/config_environments.py:    N8N_WEBHOOK_URL = os.environ.get('N8N_WEBHOOK_URL')
src/config_environments.py:    N8N_API_URL = os.environ.get('N8N_API_URL') or 'http://localhost:5678/api/v1'
src/config_environments.py:    N8N_API_KEY = os.environ.get('N8N_API_KEY')
src/config_environments.py:    N8N_WEBHOOK_SECRET = os.environ.get('N8N_WEBHOOK_SECRET')
src/config_environments.py:    N8N_TIMEOUT = int(os.environ.get('N8N_TIMEOUT', '30'))
src/config_environments.py:    UPLOAD_FOLDER = os.environ.get('UPLOAD_FOLDER') or 'uploads'
src/config_environments.py:    LOG_LEVEL = os.environ.get('LOG_LEVEL') or 'INFO'
src/config_environments.py:    LOG_FILE = os.environ.get('LOG_FILE') or 'logs/baimuras.log'
src/config_environments.py:    RATELIMIT_STORAGE_URL = os.environ.get('RATELIMIT_STORAGE_URL') or 'redis://localhost:6379/1'
src/config_environments.py:    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
src/config_environments.py:    SQLALCHEMY_DATABASE_URI = os.environ.get('STAGING_DATABASE_URL') or \
src/config_environments.py:    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
src/config_environments.py:    SECRET_KEY = os.environ.get('SECRET_KEY')
src/config_environments.py:    JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY')
src/config_environments.py:    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
src/config_environments.py:    CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL') or 'redis://redis:6379/0'
src/config_environments.py:    CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND') or 'redis://redis:6379/0'
src/config_environments.py:    RATELIMIT_STORAGE_URL = os.environ.get('RATELIMIT_STORAGE_URL') or 'redis://redis:6379/1'
src/config_environments.py:    N8N_API_URL = os.environ.get('N8N_API_URL') or 'http://n8n:5678/api/v1'
src/config_environments.py:        config_name = os.environ.get('FLASK_ENV', 'default')
src/config_environments.py:    return config.get(config_name, config['default'])
src/main.py:        config_name = os.environ.get('FLASK_ENV', 'development')
src/main.py:app = create_app(os.getenv('FLASK_ENV', 'development'))
src/utils/jwt_utils.py:        app.config.setdefault('JWT_SECRET_KEY', os.environ.get('JWT_SECRET_KEY', 'your-secret-key'))
src/utils/jwt_utils.py:    secret_key = current_app.config['JWT_SECRET_KEY']
src/utils/jwt_utils.py:    algorithm = current_app.config['JWT_ALGORITHM']
src/utils/jwt_utils.py:        'exp': datetime.utcnow() + current_app.config['JWT_ACCESS_TOKEN_EXPIRES'],
src/utils/jwt_utils.py:        'exp': datetime.utcnow() + current_app.config['JWT_REFRESH_TOKEN_EXPIRES'],
src/utils/jwt_utils.py:        'expires_in': int(current_app.config['JWT_ACCESS_TOKEN_EXPIRES'].total_seconds())
src/utils/jwt_utils.py:        secret_key = current_app.config['JWT_SECRET_KEY']
src/utils/jwt_utils.py:        algorithm = current_app.config['JWT_ALGORITHM']
src/utils/jwt_utils.py:    secret_key = current_app.config['JWT_SECRET_KEY']
src/utils/jwt_utils.py:    algorithm = current_app.config['JWT_ALGORITHM']
src/utils/n8n.py:        self.webhook_url = os.getenv('N8N_WEBHOOK_URL')
src/utils/n8n.py:        self.api_url = os.getenv('N8N_API_URL', 'http://localhost:5678/api/v1')
src/utils/n8n.py:        self.api_key = os.getenv('N8N_API_KEY')
src/utils/n8n.py:        self.webhook_secret = os.getenv('N8N_WEBHOOK_SECRET')
src/utils/n8n.py:        self.timeout = int(os.getenv('N8N_TIMEOUT', '30'))
src/utils/n8n.py:N8N_WEBHOOK_URL = os.environ.get('N8N_WEBHOOK_URL')
src/config.py:    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
src/config.py:    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///baimuras.db'
src/config.py:    MAIL_SERVER = os.environ.get('MAIL_SERVER')
src/config.py:    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)
src/config.py:    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
src/config.py:    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
src/config.py:    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
src/config.py:    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
src/config.py:    REDIS_URL = os.environ.get('REDIS_URL') or 'redis://redis:6379/0'
src/config.py:    CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL') or 'redis://redis:6379/0'
src/config.py:    CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND') or 'redis://redis:6379/0'
