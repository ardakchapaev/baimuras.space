./src/static/js/main.js:12:    console.log('BaiMuras website initialized');
./src/config_environments.py:11:    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
./src/config_environments.py:18:    JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY') or SECRET_KEY
./src/config_environments.py:150:    SECRET_KEY = os.environ.get('SECRET_KEY')
./src/config_environments.py:151:    if not SECRET_KEY:
./src/config_environments.py:152:        raise ValueError("No SECRET_KEY set for production config")
./src/config_environments.py:154:    JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY')
./src/config_environments.py:155:    if not JWT_SECRET_KEY:
./src/config_environments.py:156:        raise ValueError("No JWT_SECRET_KEY set for production config")
./src/main.py:130:    application.register_blueprint(main_bp)
./src/main.py:131:    application.register_blueprint(api_bp)
./src/main.py:132:    application.register_blueprint(api_v1_bp)
./src/main.py:133:    application.register_blueprint(user_bp)
./src/main.py:134:    application.register_blueprint(crm_bp)
./src/main.py:135:    application.register_blueprint(webhooks_bp)
./src/routes/user.py:7:user_bp = Blueprint("user", __name__)
./src/routes/api.py:16:api_bp = Blueprint("api", __name__, url_prefix="/api")
./src/routes/webhooks.py:15:webhooks_bp = Blueprint('webhooks', __name__, url_prefix='/webhooks')
./src/routes/crm.py:8:crm_bp = Blueprint('crm', __name__, url_prefix='/crm')
./src/routes/main_routes.py:12:main_bp = Blueprint("main", __name__)
./src/routes/main_routes.py:110:            print(f"Error saving consultation request: {consultation_error}")
./src/routes/main_routes.py:202:            print(f"Registration error: {register_error}")
./src/routes/api_v1.py:19:api_v1_bp = Blueprint('api_v1', __name__, url_prefix='/api/v1')
./src/routes/api_v1.py:547:        manager_emails = ['manager@baimuras.space']  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
./src/routes/api_v1.py:770:            'redis': 'connected',  # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
./src/routes/api_v1.py:771:            'n8n': 'configured'    # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n
./src/utils/jwt_utils.py:23:        app.config.setdefault('JWT_SECRET_KEY', os.environ.get('JWT_SECRET_KEY', 'your-secret-key'))
./src/utils/jwt_utils.py:44:    secret_key = current_app.config['JWT_SECRET_KEY']
./src/utils/jwt_utils.py:86:        secret_key = current_app.config['JWT_SECRET_KEY']
./src/utils/jwt_utils.py:296:    secret_key = current_app.config['JWT_SECRET_KEY']
./src/config.py:12:    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
./run_modernized.py:24:    print("Database created successfully!")
./run_modernized.py:98:            print("Database initialized successfully!")
./run_modernized.py:99:            print("Admin user created: admin / admin123")
./run_modernized.py:102:            print(f"Error initializing database: {e}")
./run_modernized.py:120:        print(line)
./deploy-production.sh:51:    if [ -z "$SECRET_KEY" ]; then
./deploy-production.sh:52:        error "SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.prod"
./.env.prod:9:SECRET_KEY=BaiMuras2025!FlaskSecretKey!ProductionReady
./.env.prod:10:JWT_SECRET_KEY=BaiMuras2025!JWTSecretKey!SuperSecure
./deploy.sh:198:            SECRET_KEY=\$(openssl rand -hex 32)
./deploy.sh:199:            JWT_SECRET_KEY=\$(openssl rand -hex 32)
./deploy.sh:203:            sed -i \"s/your-secret-key-change-in-production/\$SECRET_KEY/g\" .env
./deploy.sh:204:            sed -i \"s/your-jwt-secret-key-change-in-production/\$JWT_SECRET_KEY/g\" .env
./deploy.sh:374:        print('–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã')
./deploy.sh:375:        print('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@baimuras.space / admin123')
./deploy.sh:377:        print('–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç')
./docker-compose.prod.yml:41:      - SECRET_KEY=${SECRET_KEY}
./docker-compose.prod.yml:42:      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
./.env.example:9:SECRET_KEY=your-super-secret-key-change-in-production-min-32-chars
./.env.example:10:JWT_SECRET_KEY=your-jwt-secret-key-change-in-production-min-32-chars
./.env.example:145:KASPI_SECRET_KEY=your-kaspi-secret-key
./.env.example:149:PAYBOX_SECRET_KEY=your-paybox-secret-key
./.env.example:199:AWS_SECRET_ACCESS_KEY=your-aws-secret-key
./.env.example:239:#    python -c "import secrets; print(secrets.token_hex(32))"
./automation/tasks/analytics_tasks.py:43:        print(f"Weekly report generated: {report_data}")
./automation/tasks/analytics_tasks.py:174:        print(f"Dashboard cache updated: {dashboard_data}")
./automation/tasks/backup_tasks.py:110:                    print(f"Removed old backup: {filename}")
./automation/tasks/backup_tasks.py:113:        print(f"Error cleaning up old backups: {str(e)}")
./automation/tasks/notification_tasks.py:20:        print("Checking for overdue measurements...")
./automation/tasks/notification_tasks.py:70:        print(f"Lead {lead_id} assigned to manager {manager_id}")
./automation/tasks/notification_tasks.py:94:        print(f"Project {project_id} milestone: {message}")
./automation/tasks/notification_tasks.py:120:        print(f"Weekly digest prepared: {stats}")
./migrations/env.py:29:        return get_engine().url.render_as_string(hide_password=False).replace(
./test_forms.py:13:    print("Testing contact form...")
./test_forms.py:32:            print("‚úÖ Contact form: SUCCESS")
./test_forms.py:35:            print(f"‚ùå Contact form: FAILED (Status: {response.status_code})")
./test_forms.py:39:        print(f"‚ùå Contact form: ERROR - {e}")
./test_forms.py:44:    print("Testing API consultation endpoint...")
./test_forms.py:64:                print("‚úÖ API consultation: SUCCESS")
./test_forms.py:67:                print(f"‚ùå API consultation: FAILED - {result}")
./test_forms.py:70:            print(f"‚ùå API consultation: FAILED (Status: {response.status_code})")
./test_forms.py:74:        print(f"‚ùå API consultation: ERROR - {e}")
./test_forms.py:77:        print(f"‚ùå API consultation: JSON ERROR - {e}")
./test_forms.py:82:    print("Testing registration form...")
./test_forms.py:99:            print("‚úÖ Registration form: SUCCESS")
./test_forms.py:102:            print(f"‚ùå Registration form: FAILED (Status: {response.status_code})")
./test_forms.py:106:        print(f"‚ùå Registration form: ERROR - {e}")
./test_forms.py:111:    print("Checking server availability...")
./test_forms.py:116:            print("‚úÖ Server is running")
./test_forms.py:119:            print(f"‚ùå Server responded with status: {response.status_code}")
./test_forms.py:122:        print(f"‚ùå Server is not available: {e}")
./test_forms.py:127:    print("=== BaiMuras Forms Testing ===\n")
./test_forms.py:131:        print("\n‚ùå Cannot proceed with tests - server is not available")
./test_forms.py:132:        print("Please start the server with: python -m flask run")
./test_forms.py:135:    print()
./test_forms.py:147:        print()
./test_forms.py:153:    print("=== Test Summary ===")
./test_forms.py:154:    print(f"Passed: {passed}/{total}")
./test_forms.py:157:        print("üéâ All tests passed!")
./test_forms.py:160:        print("‚ö†Ô∏è  Some tests failed")
./docker-compose.yml:98:      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
./docker-compose.yml:99:      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-key}
