#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–µ—Ä–æ–≤
"""

import os
import sys

from src.utils.logging_config import logger

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
os.environ["SECRET_KEY"] = "test-secret-key-for-import-testing"
os.environ["JWT_SECRET_KEY"] = "test-jwt-secret-key-for-import-testing"
os.environ["FLASK_ENV"] = "development"
os.environ["FLASK_DEBUG"] = "False"


def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")

    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
        logger.info("  ‚úì –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —É—Ç–∏–ª–∏—Ç
        logger.info("  ‚úì –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç...")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        logger.info("  ‚úì –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤...")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("  ‚úì –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        from src.main import create_app

        create_app("development")

        logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        logger.info("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫!")
        return True

    except Exception as e:
        logger.info(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
    logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤...")

    import glob
    import py_compile

    python_files = glob.glob("src/**/*.py", recursive=True)
    errors = []

    for file_path in python_files:
        try:
            py_compile.compile(file_path, doraise=True)
            logger.info(f"  ‚úì {file_path}")
        except py_compile.PyCompileError as e:
            errors.append(f"  ‚ùå {file_path}: {e}")
            logger.info(f"  ‚ùå {file_path}: {e}")

    if not errors:
        logger.info("‚úÖ –í—Å–µ Python —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!")
        return True
    else:
        logger.info(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(errors)} —Ñ–∞–π–ª–æ–≤ —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info(
        "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BaiMuras Platform –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–µ—Ä–æ–≤\n"
    )

    syntax_ok = test_syntax()
    imports_ok = test_imports()

    logger.info("\n" + "=" * 60)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info("=" * 60)
    logger.info(
        f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤: {'‚úÖ –ü–†–û–ô–î–ï–ù' if syntax_ok else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}"
    )
    logger.info(f"–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π: {'‚úÖ –ü–†–û–ô–î–ï–ù' if imports_ok else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")

    if syntax_ok and imports_ok:
        logger.info("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ë–õ–û–ö–ï–†–´ –£–°–¢–†–ê–ù–ï–ù–´!")
        logger.info("‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        logger.info("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return 0
    else:
        logger.info("\n‚ö†Ô∏è  –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø")
        return 1


if __name__ == "__main__":
    sys.exit(main())
