// BaiMuras Furniture Business Admin Panel Schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/baimuras-admin-panel/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core Business Models
model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password_hash String?
  name          String?
  phone         String?
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  assignedProjects Project[] @relation("AssignedUser")
  assignedOrders   Order[]   @relation("AssignedUser")
  measurements     Measurement[]
  estimates        Estimate[]
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  permissions Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  users UserRole[]
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Lead {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String?
  status    String   @default("new") // new, contacted, qualified, converted, lost
  score     Float    @default(0.0)
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  projectType String?   // furniture, design, academy
  status      String    @default("planning") // planning, in_progress, completed, cancelled
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign Keys
  leadId       String?
  assignedUserId String?

  // Relations
  lead         Lead?        @relation(fields: [leadId], references: [id])
  assignedUser User?        @relation("AssignedUser", fields: [assignedUserId], references: [id])
  orders       Order[]
  estimates    Estimate[]
  measurements Measurement[]
  projectImages ProjectImage[]
}

model ProjectImage {
  id        String   @id @default(cuid())
  projectId String
  imageUrl  String
  caption   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Order {
  id             String    @id @default(cuid())
  orderNumber    String    @unique
  title          String
  description    String?
  status         String    @default("pending") // pending, confirmed, in_production, ready, delivered, completed, cancelled
  totalAmount    Float
  paidAmount     Float     @default(0)
  discount       Float     @default(0)
  deliveryDate   DateTime?
  installationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Foreign Keys
  projectId      String?
  assignedUserId String?

  // Relations
  project      Project?    @relation(fields: [projectId], references: [id])
  assignedUser User?       @relation("AssignedUser", fields: [assignedUserId], references: [id])
  orderItems   OrderItem[]
  payments     Payment[]
  installations Installation[]
}

model OrderItem {
  id          String @id @default(cuid())
  orderId     String
  materialId  String?
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  order    Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  material Material? @relation(fields: [materialId], references: [id])
}

model Estimate {
  id          String   @id @default(cuid())
  title       String
  description String?
  totalAmount Float
  validUntil  DateTime?
  status      String   @default("draft") // draft, sent, approved, rejected, expired
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  projectId String?
  userId    String

  // Relations
  project       Project?        @relation(fields: [projectId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
  estimateItems EstimateItem[]
}

model EstimateItem {
  id          String @id @default(cuid())
  estimateId  String
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)
}

model Material {
  id          String  @id @default(cuid())
  name        String
  description String?
  category    String
  unit        String  // pieces, meters, square_meters, etc.
  unitPrice   Float
  stockLevel  Int     @default(0)
  minStock    Int     @default(0)
  supplierInfo Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
}

model Measurement {
  id          String    @id @default(cuid())
  title       String
  description String?
  scheduledAt DateTime
  duration    Int       @default(60) // minutes
  status      String    @default("scheduled") // scheduled, completed, cancelled, rescheduled
  address     String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign Keys
  projectId String?
  userId    String

  // Relations
  project Project? @relation(fields: [projectId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String
  amount        Float
  paymentMethod String   // cash, card, bank_transfer, etc.
  status        String   @default("pending") // pending, completed, failed, refunded
  transactionId String?
  notes         String?
  paidAt        DateTime?
  createdAt     DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

model Installation {
  id          String    @id @default(cuid())
  orderId     String
  scheduledAt DateTime
  completedAt DateTime?
  status      String    @default("scheduled") // scheduled, in_progress, completed, cancelled
  team        String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

model Supplier {
  id              String @id @default(cuid())
  name            String
  contactPerson   String?
  email           String?
  phone           String?
  address         String?
  paymentTerms    String?
  deliveryTerms   String?
  rating          Float?
  notes           String?
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
