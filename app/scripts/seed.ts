
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding...');

  // Create roles
  console.log('Creating roles...');
  const adminRole = await prisma.role.upsert({
    where: { name: 'admin' },
    update: {},
    create: {
      name: 'admin',
      description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
      permissions: {
        users: ['create', 'read', 'update', 'delete'],
        projects: ['create', 'read', 'update', 'delete'],
        orders: ['create', 'read', 'update', 'delete'],
        estimates: ['create', 'read', 'update', 'delete'],
        materials: ['create', 'read', 'update', 'delete'],
        reports: ['read'],
        settings: ['read', 'update']
      }
    }
  });

  const managerRole = await prisma.role.upsert({
    where: { name: 'manager' },
    update: {},
    create: {
      name: 'manager',
      description: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤',
      permissions: {
        projects: ['create', 'read', 'update'],
        orders: ['create', 'read', 'update'],
        estimates: ['create', 'read', 'update'],
        materials: ['read'],
        reports: ['read']
      }
    }
  });

  const designerRole = await prisma.role.upsert({
    where: { name: 'designer' },
    update: {},
    create: {
      name: 'designer',
      description: '–î–∏–∑–∞–π–Ω–µ—Ä –º–µ–±–µ–ª–∏',
      permissions: {
        projects: ['read', 'update'],
        estimates: ['create', 'read', 'update']
      }
    }
  });

  // Create users
  console.log('Creating users...');
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@baimuras.space' },
    update: {},
    create: {
      username: 'admin',
      email: 'admin@baimuras.space',
      password_hash: await bcrypt.hash('admin123', 10),
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      phone: '+996 312 123 456',
      roles: {
        create: {
          roleId: adminRole.id
        }
      }
    }
  });

  const managerUser = await prisma.user.upsert({
    where: { email: 'manager@baimuras.space' },
    update: {},
    create: {
      username: 'manager',
      email: 'manager@baimuras.space',
      password_hash: await bcrypt.hash('manager123', 10),
      name: '–ú–∞—Ä–∞—Ç –î–∂—É–º–∞–±–∞–µ–≤',
      phone: '+996 555 987 654',
      roles: {
        create: {
          roleId: managerRole.id
        }
      }
    }
  });

  const designerUser = await prisma.user.upsert({
    where: { email: 'designer@baimuras.space' },
    update: {},
    create: {
      username: 'designer',
      email: 'designer@baimuras.space',
      password_hash: await bcrypt.hash('designer123', 10),
      name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
      phone: '+996 777 456 789',
      roles: {
        create: {
          roleId: designerRole.id
        }
      }
    }
  });

  // Create leads
  console.log('Creating leads...');
  const lead1 = await prisma.lead.create({
    data: {
      name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
      email: 'anna.ivanova@example.com',
      phone: '+996 555 123 456',
      subject: '–ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å',
      message: '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã',
      status: 'new',
      score: 0.8,
      source: 'website'
    }
  });

  const lead2 = await prisma.lead.create({
    data: {
      name: '–ú–∞—Ä–∞—Ç –î–∂—É–º–∞–±–∞–µ–≤',
      email: 'marat.djumabaev@example.com',
      phone: '+996 777 987 654',
      subject: '–ú–µ–±–µ–ª—å –¥–ª—è –æ—Ñ–∏—Å–∞',
      message: '–ù—É–∂–Ω–∞ –º–µ–±–µ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ñ–∏—Å–∞',
      status: 'contacted',
      score: 0.9,
      source: 'referral'
    }
  });

  const lead3 = await prisma.lead.create({
    data: {
      name: '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
      email: 'elena.smirnova@example.com',
      phone: '+996 312 456 789',
      subject: '–î–µ—Ç—Å–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞',
      message: '–ò—â–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–µ–±–µ–ª—å –¥–ª—è –¥–µ—Ç—Å–∫–æ–π',
      status: 'qualified',
      score: 0.95,
      source: 'telegram'
    }
  });

  // Create projects
  console.log('Creating projects...');
  const project1 = await prisma.project.create({
    data: {
      title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è –¥–ª—è —Å–µ–º—å–∏ –ò–≤–∞–Ω–æ–≤—ã—Ö',
      description: '–ü–æ–ª–Ω–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫—É—Ö–Ω–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º',
      projectType: 'furniture',
      status: 'in_progress',
      budget: 450000,
      startDate: new Date('2024-01-15'),
      endDate: new Date('2024-03-01'),
      leadId: lead1.id,
      assignedUserId: managerUser.id
    }
  });

  const project2 = await prisma.project.create({
    data: {
      title: '–î–µ—Ç—Å–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞ –ú–æ–Ω—Ç–µ—Å—Å–æ—Ä–∏',
      description: '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–µ–±–µ–ª—å –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –ú–æ–Ω—Ç–µ—Å—Å–æ—Ä–∏',
      projectType: 'furniture',
      status: 'planning',
      budget: 280000,
      startDate: new Date('2024-02-01'),
      endDate: new Date('2024-02-28'),
      leadId: lead3.id,
      assignedUserId: designerUser.id
    }
  });

  const project3 = await prisma.project.create({
    data: {
      title: '–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å –¥–ª—è IT-–∫–æ–º–ø–∞–Ω–∏–∏',
      description: '–≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      projectType: 'furniture',
      status: 'completed',
      budget: 680000,
      startDate: new Date('2023-12-01'),
      endDate: new Date('2024-01-15'),
      leadId: lead2.id,
      assignedUserId: managerUser.id
    }
  });

  // Create materials
  console.log('Creating materials...');
  await prisma.material.createMany({
    data: [
      {
        name: '–ü–ª–∏—Ç–∞ –ú–î–§ 18–º–º',
        description: '–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∞—è –ø–ª–∏—Ç–∞ –ú–î–§ –¥–ª—è –º–µ–±–µ–ª–∏',
        category: '–ü–ª–∏—Ç—ã',
        unit: '–ª–∏—Å—Ç—ã',
        unitPrice: 3500,
        stockLevel: 45,
        minStock: 10,
        supplierInfo: {
          name: '–î—Ä–µ–≤–ü—Ä–æ–º –ö–ì',
          contact: '+996 312 123456'
        }
      },
      {
        name: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞ Blum',
        description: '–ü–µ—Ç–ª–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ Blum',
        category: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞',
        unit: '–∫–æ–º–ø–ª–µ–∫—Ç',
        unitPrice: 8500,
        stockLevel: 3,
        minStock: 5,
        supplierInfo: {
          name: '–ú–µ–±–µ–ª—å-–§—É—Ä–Ω–∏—Ç—É—Ä–∞',
          contact: '+996 555 987654'
        }
      },
      {
        name: '–ö—Ä–æ–º–∫–∞ –ü–í–• –±–µ–ª–∞—è',
        description: '–ö—Ä–æ–º–æ—á–Ω–∞—è –ª–µ–Ω—Ç–∞ –ü–í–• 2–º–º',
        category: '–ö—Ä–æ–º–∫–∏',
        unit: '–º–µ—Ç—Ä—ã',
        unitPrice: 45,
        stockLevel: 850,
        minStock: 100,
        supplierInfo: {
          name: '–¢–µ—Ö–Ω–æ-–ö—Ä–æ–º–∫–∞',
          contact: '+996 777 456789'
        }
      },
      {
        name: '–õ–∞–∫ –ø–æ–ª–∏—É—Ä–µ—Ç–∞–Ω–æ–≤—ã–π',
        description: '–ó–∞—â–∏—Ç–Ω—ã–π –ª–∞–∫ –¥–ª—è –¥—Ä–µ–≤–µ—Å–∏–Ω—ã',
        category: '–•–∏–º–∏—è',
        unit: '–ª–∏—Ç—Ä—ã',
        unitPrice: 1200,
        stockLevel: 12,
        minStock: 5,
        supplierInfo: {
          name: '–•–∏–º–ü—Ä–æ–º',
          contact: '+996 312 789012'
        }
      }
    ]
  });

  // Create orders
  console.log('Creating orders...');
  const order1 = await prisma.order.create({
    data: {
      orderNumber: 'BM240001',
      title: '–ö—É—Ö–æ–Ω–Ω—ã–π –≥–∞—Ä–Ω–∏—Ç—É—Ä "–ú–æ–¥–µ—Ä–Ω"',
      description: '–ü–æ–ª–Ω—ã–π –∫—É—Ö–æ–Ω–Ω—ã–π –≥–∞—Ä–Ω–∏—Ç—É—Ä —Å –æ—Å—Ç—Ä–æ–≤–æ–º',
      status: 'in_production',
      totalAmount: 450000,
      paidAmount: 225000,
      discount: 0,
      deliveryDate: new Date('2024-02-15'),
      installationDate: new Date('2024-02-16'),
      projectId: project1.id,
      assignedUserId: managerUser.id
    }
  });

  const order2 = await prisma.order.create({
    data: {
      orderNumber: 'BM240002',
      title: '–î–µ—Ç—Å–∫–∞—è –º–µ–±–µ–ª—å –ú–æ–Ω—Ç–µ—Å—Å–æ—Ä–∏',
      description: '–ö—Ä–æ–≤–∞—Ç—å, —Å—Ç–æ–ª, —Å—Ç–µ–ª–ª–∞–∂–∏ –¥–ª—è –¥–µ—Ç—Å–∫–æ–π',
      status: 'confirmed',
      totalAmount: 180000,
      paidAmount: 54000,
      discount: 10000,
      deliveryDate: new Date('2024-02-20'),
      projectId: project2.id,
      assignedUserId: designerUser.id
    }
  });

  // Create estimates
  console.log('Creating estimates...');
  await prisma.estimate.create({
    data: {
      title: '–ö—É—Ö–æ–Ω–Ω—ã–π –≥–∞—Ä–Ω–∏—Ç—É—Ä –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã',
      description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è —Å –æ—Å—Ç—Ä–æ–≤–æ–º, —Ç–µ—Ö–Ω–∏–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è',
      totalAmount: 450000,
      validUntil: new Date('2024-02-28'),
      status: 'sent',
      notes: '–í–∫–ª—é—á–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞',
      projectId: project1.id,
      userId: managerUser.id,
      estimateItems: {
        create: [
          {
            description: '–ö—É—Ö–æ–Ω–Ω—ã–µ —à–∫–∞—Ñ—ã –≤–µ—Ä—Ö–Ω–∏–µ',
            quantity: 8,
            unitPrice: 25000,
            totalPrice: 200000
          },
          {
            description: '–ö—É—Ö–æ–Ω–Ω—ã–µ —à–∫–∞—Ñ—ã –Ω–∏–∂–Ω–∏–µ',
            quantity: 6,
            unitPrice: 30000,
            totalPrice: 180000
          },
          {
            description: '–°—Ç–æ–ª–µ—à–Ω–∏—Ü–∞ –∏–∑ –∫–≤–∞—Ä—Ü–∞',
            quantity: 1,
            unitPrice: 70000,
            totalPrice: 70000
          }
        ]
      }
    }
  });

  // Create measurements
  console.log('Creating measurements...');
  await prisma.measurement.createMany({
    data: [
      {
        title: '–ó–∞–º–µ—Ä –∫—É—Ö–Ω–∏ —É –ò–≤–∞–Ω–æ–≤—ã—Ö',
        description: '–ó–∞–º–µ—Ä –¥–ª—è –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞',
        scheduledAt: new Date('2024-02-05T10:00:00'),
        duration: 90,
        status: 'scheduled',
        address: '—É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 123, –∫–≤. 45',
        notes: '–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞',
        projectId: project1.id,
        userId: managerUser.id
      },
      {
        title: '–ó–∞–º–µ—Ä –¥–µ—Ç—Å–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã',
        description: '–ú–µ–±–µ–ª—å –ú–æ–Ω—Ç–µ—Å—Å–æ—Ä–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞',
        scheduledAt: new Date('2024-02-05T14:00:00'),
        duration: 60,
        status: 'scheduled',
        address: '–ø—Ä. –ú–∞–Ω–∞—Å–∞, 67, –∫–≤. 12',
        notes: '–ï—Å—Ç—å –¥–æ–º–æ—Ñ–æ–Ω, –∫–æ–¥ 1234',
        projectId: project2.id,
        userId: designerUser.id
      }
    ]
  });

  // Create payments
  console.log('Creating payments...');
  await prisma.payment.createMany({
    data: [
      {
        orderId: order1.id,
        amount: 225000,
        paymentMethod: 'bank_transfer',
        status: 'completed',
        transactionId: 'TXN001',
        paidAt: new Date('2024-01-20T15:30:00')
      },
      {
        orderId: order2.id,
        amount: 54000,
        paymentMethod: 'cash',
        status: 'completed',
        paidAt: new Date('2024-01-25T11:00:00')
      }
    ]
  });

  console.log('‚úÖ Database seeding completed successfully!');
  console.log('');
  console.log('Demo credentials:');
  console.log('Admin: admin@baimuras.space / admin123');
  console.log('Manager: manager@baimuras.space / manager123');
  console.log('Designer: designer@baimuras.space / designer123');
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
