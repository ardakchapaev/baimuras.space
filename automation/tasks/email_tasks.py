"""–ó–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

import os
import smtplib
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from automation.celery_app import celery_app


@celery_app.task(
    bind=True,
    autoretry_for=(Exception,),
    retry_kwargs={"max_retries": 3, "countdown": 60},
)
def send_welcome_email(self, user_email: str, user_name: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ email –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        subject = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BaiMuras!"

        html_content = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <div style="background: #6b70ba; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
                    <h1 style="margin: 0;">BaiMuras</h1>
                    <p style="margin: 5px 0 0 0;">–ú–µ–±–µ–ª—å–Ω—ã–π –∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥</p>
                </div>

                <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px;">
                    <h2 style="color: #6b70ba;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</h2>

                    <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ BaiMuras. –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –ª—é–±–∏—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏.</p>

                    <div style="background: white; padding: 20px; margin: 20px 0; border-radius: 5px; border-left: 4px solid #6b70ba;">
                        <h3 style="margin-top: 0; color: #6b70ba;">–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:</h3>
                        <ul>
                            <li>–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –¥–∏–∑–∞–π–Ω—É</li>
                            <li>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞</li>
                            <li>–°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤</li>
                            <li>–ü–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</li>
                        </ul>
                    </div>

                    <div style="text-align: center; margin: 30px 0;">
                        <a href="https://baimuras.space/services"
                           style="background: #6b70ba; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; display: inline-block;">
                            –ò–∑—É—á–∏—Ç—å –Ω–∞—à–∏ —É—Å–ª—É–≥–∏
                        </a>
                    </div>

                    <p style="color: #666; font-size: 14px;">
                        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:<br>
                        üìû +996 509 912 569<br>
                        üìß info@baimuras.space
                    </p>
                </div>
            </div>
        </body>
        </html>
        """

        return send_email(user_email, subject, html_content)

    except Exception as exc:
        self.retry(exc=exc)


@celery_app.task(bind=True)
def send_consultation_confirmation(self, consultation_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–∑ –ë–î
        subject = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è BaiMuras - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"

        html_content = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #6b70ba;">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</h2>
                <p>–í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–µ–±–µ–ª—å–Ω–æ–º—É –¥–∏–∑–∞–π–Ω—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.</p>
                <p>–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.</p>
            </div>
        </body>
        </html>
        """

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ email –∏–∑ –ë–î
        return send_email("client@example.com", subject, html_content)

    except Exception as exc:
        self.retry(exc=exc)


@celery_app.task(bind=True)
def send_project_status_update(self, project_id: int, new_status: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞."""
    try:
        subject = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ - {new_status}"

        status_messages = {
            "measurement": "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è",
            "design": "–ù–∞—á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–æ–º",
            "approval": "–î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é",
            "production": "–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
            "installation": "–ú–µ–±–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ",
            "completed": "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω",
        }

        message = status_messages.get(new_status, "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")

        html_content = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #6b70ba;">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É</h2>
                <p><strong>{message}</strong></p>
                <p>–í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
            </div>
        </body>
        </html>
        """

        return send_email("client@example.com", subject, html_content)

    except Exception as exc:
        self.retry(exc=exc)


@celery_app.task
def send_measurement_reminder(measurement_id: int):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∑–∞–º–µ—Ä–µ."""
    subject = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–º–µ—Ä–µ - BaiMuras"

    html_content = """
    <html>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
            <h2 style="color: #6b70ba;">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–º–µ—Ä–µ</h2>
            <p>–ó–∞–≤—Ç—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–º–µ—Ä –≤–∞—à–µ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è.</p>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –∏ –æ–±–µ—Å–ø–µ—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.</p>
        </div>
    </body>
    </html>
    """

    return send_email("client@example.com", subject, html_content)


def send_email(to_email: str, subject: str, html_content: str, attachments=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email."""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        smtp_server = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
        smtp_port = int(os.environ.get("SMTP_PORT", "587"))
        smtp_username = os.environ.get("SMTP_USERNAME", "")
        smtp_password = os.environ.get("SMTP_PASSWORD", "")
        from_email = os.environ.get("FROM_EMAIL", "info@baimuras.space")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = MIMEMultipart("alternative")
        msg["Subject"] = subject
        msg["From"] = from_email
        msg["To"] = to_email

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        html_part = MIMEText(html_content, "html", "utf-8")
        msg.attach(html_part)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if attachments:
            for attachment in attachments:
                with open(attachment, "rb") as file:
                    part = MIMEBase("application", "octet-stream")
                    part.set_payload(file.read())
                    encoders.encode_base64(part)
                    part.add_header(
                        "Content-Disposition",
                        f"attachment; filename= {os.path.basename(attachment)}",
                    )
                    msg.attach(part)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ email
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_username, smtp_password)
            server.send_message(msg)

        return {"status": "success", "message": f"Email sent to {to_email}"}

    except Exception as e:
        return {"status": "error", "message": str(e)}
