{"dependencies": [{"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.9.0", "vulns": []}, {"name": "astroid", "version": "3.3.10", "vulns": []}, {"name": "authlib", "version": "1.6.0", "vulns": []}, {"name": "bandit", "version": "1.8.5", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "certifi", "version": "2025.6.15", "vulns": []}, {"name": "cffi", "version": "1.17.1", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.2", "vulns": []}, {"name": "click", "version": "8.1.8", "vulns": []}, {"name": "cryptography", "version": "45.0.4", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "deptry", "version": "0.23.0", "vulns": []}, {"name": "dill", "version": "0.4.0", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "flake8", "version": "7.2.0", "vulns": []}, {"name": "flask", "version": "2.3.3", "vulns": []}, {"name": "flask-cors", "version": "4.0.0", "vulns": [{"id": "PYSEC-2024-71", "fix_versions": ["4.0.2"], "aliases": ["CVE-2024-6221"], "description": "A vulnerability in corydolphin/flask-cors up to version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default, without any configuration option. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions."}, {"id": "GHSA-84pr-m4jr-85g5", "fix_versions": ["4.0.1"], "aliases": ["CVE-2024-1681"], "description": "corydolphin/flask-cors is vulnerable to log injection when the log level is set to debug. An attacker can inject fake log entries into the log file by sending a specially crafted GET request containing a CRLF sequence in the request path. This vulnerability allows attackers to corrupt log files, potentially covering tracks of other attacks, confusing log post-processing tools, and forging log entries. The issue is due to improper output neutralization for logs."}, {"id": "GHSA-8vgw-p6qm-5gr7", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6844"], "description": "A vulnerability in corydolphin/flask-cors version 5.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues."}, {"id": "GHSA-43qf-4rqw-9q2g", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6866"], "description": "corydolphin/flask-cors version 5.0.1 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks."}, {"id": "GHSA-7rxf-gvfg-47g4", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6839"], "description": "corydolphin/flask-cors version 5.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors."}]}, {"name": "flask-sqlalchemy", "version": "3.0.5", "vulns": []}, {"name": "flask-wtf", "version": "1.1.1", "vulns": []}, {"name": "greenlet", "version": "3.2.3", "vulns": []}, {"name": "gunicorn", "version": "21.2.0", "vulns": [{"id": "GHSA-w3h3-4rj7-4ph4", "fix_versions": ["22.0.0"], "aliases": ["CVE-2024-1135"], "description": "Gunicorn fails to properly validate Transfer-Encoding headers, leading to HTTP Request Smuggling (HRS) vulnerabilities. By crafting requests with conflicting Transfer-Encoding headers, attackers can bypass security restrictions and access restricted endpoints. This issue is due to Gunicorn's handling of Transfer-Encoding headers, where it incorrectly processes requests with multiple, conflicting Transfer-Encoding headers, treating them as chunked regardless of the final encoding specified. This vulnerability has been shown to allow access to endpoints restricted by gunicorn. This issue has been addressed in version 22.0.0.  To be affected users must have a network path which does not filter out invalid requests. These users are advised to block access to restricted endpoints via a firewall or other mechanism if they are unable to update."}, {"id": "GHSA-hc5x-x2vx-497g", "fix_versions": ["23.0.0"], "aliases": ["CVE-2024-6827"], "description": "Gunicorn version 21.2.0 does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it vulnerable to TE.CL request smuggling. This vulnerability can lead to cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information leakage, and business logic abuse."}]}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "isort", "version": "6.0.1", "vulns": []}, {"name": "itsdangerous", "version": "2.2.0", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "joblib", "version": "1.5.1", "vulns": []}, {"name": "license-expression", "version": "30.4.1", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "4.0.0", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "mypy", "version": "1.16.1", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "packageurl-python", "version": "0.17.1", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "pbr", "version": "6.1.1", "vulns": []}, {"name": "pip", "version": "25.1.1", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "psutil", "version": "6.1.1", "vulns": []}, {"name": "py-serializable", "version": "2.0.0", "vulns": []}, {"name": "pycodestyle", "version": "2.13.0", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pydantic", "version": "2.9.2", "vulns": []}, {"name": "pydantic-core", "version": "2.23.4", "vulns": []}, {"name": "pyflakes", "version": "3.3.2", "vulns": []}, {"name": "pygments", "version": "2.19.1", "vulns": []}, {"name": "pylint", "version": "3.3.7", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}, {"name": "python-dotenv", "version": "1.0.0", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "requests", "version": "2.32.4", "vulns": []}, {"name": "requirements-parser", "version": "0.13.0", "vulns": []}, {"name": "rich", "version": "14.0.0", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.14", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.12", "vulns": []}, {"name": "safety", "version": "3.5.2", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.41", "vulns": []}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "typing-extensions", "version": "4.14.0", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "werkzeug", "version": "2.3.7", "vulns": [{"id": "PYSEC-2023-221", "fix_versions": ["2.3.8", "3.0.1"], "aliases": ["CVE-2023-46136", "GHSA-hrfv-mqp8-q5rw"], "description": "Werkzeug is a comprehensive WSGI web application library. If an upload of a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. This vulnerability has been patched in version 3.0.1."}, {"id": "GHSA-2g68-c3qc-8985", "fix_versions": ["3.0.3"], "aliases": ["CVE-2024-34069"], "description": "The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger."}, {"id": "GHSA-f9vj-2wh5-fj8j", "fix_versions": ["3.0.6"], "aliases": ["CVE-2024-49766"], "description": "On Python < 3.11 on Windows, `os.path.isabs()` does not catch UNC paths like `//server/share`. Werkzeug's `safe_join()` relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable."}, {"id": "GHSA-q34m-jh98-gwm2", "fix_versions": ["3.0.6"], "aliases": ["CVE-2024-49767"], "description": "Applications using Werkzeug to parse `multipart/form-data` requests are vulnerable to resource exhaustion. A specially crafted form body can bypass the `Request.max_form_memory_size` setting.   The `Request.max_content_length` setting, as well as resource limits provided by deployment software and platforms, are also available to limit the resources used during a request. This vulnerability does not affect those settings. All three types of limits should be considered and set appropriately when deploying an application."}]}, {"name": "wtforms", "version": "3.0.1", "vulns": []}], "fixes": []}
